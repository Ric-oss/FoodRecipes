{"version":3,"sources":["logo.svg","components/recipe.js","App.js","reportWebVitals.js","index.js"],"names":["recipe","props","className","title","src","image","alt","ingredients","map","ingredient","text","calories","App","useState","lists","setlist","search","setSearch","query","setQuery","useEffect","console","log","setdata","submit","e","preventDefault","fetch","then","res","json","data","hits","onSubmit","type","value","onChange","target","onClick","label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAAe,I,YCqBAA,MAnBf,SAAgBC,GACZ,OACI,sBAAKC,UAAU,WAAf,UACA,6BAAKD,EAAME,QACX,qBAAKC,IAAKH,EAAMI,MAAOC,IAAI,KAC9B,6BACKL,EAAMM,YAAYC,KAAI,SAAAC,GAAU,OAC7B,6BAAKA,EAAWC,YAKxB,4BAAIT,EAAMU,eCgEAC,MAzEf,WACE,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,QAAQC,IAAI,aACZC,MACA,CAACL,IAEH,IAIMM,EAAS,SAACC,GACdA,EAAEC,iBACFL,QAAQC,IAAI,UACZH,EAASH,GACTK,QAAQC,IAAI,0BACZL,EAAU,KAKNM,EAAU,WACdF,QAAQC,IAAI,2BAIZK,MAAM,mCAAD,OAAoCT,EAApC,mBAFU,WAEV,oBADW,qCAEbU,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UACVF,MAAK,SAAAG,GACNhB,EAAQgB,EAAKC,UAQnB,OACE,8BAEE,sBAAK9B,UAAU,YAAf,UACE,uBAAM+B,SAAUT,EAAhB,UACE,uBAAOU,KAAK,OAAOC,MAAOnB,EAAQoB,SApC1B,SAACX,GACfR,EAAUQ,EAAEY,OAAOF,UAoCb,wBAAQD,KAAK,SAASI,QAASd,EAA/B,uBAGF,qBAAKtB,UAAU,SAAf,SACGY,EAAMN,KAAI,SAACR,GACV,OACE,cAAC,EAAD,CAEEG,MAAOH,EAAOA,OAAOuC,MACrB5B,SAAUX,EAAOA,OAAOW,SACxBN,MAAOL,EAAOA,OAAOK,MACrBE,YAAaP,EAAOA,OAAOO,aAJtBP,EAAOA,OAAOuC,kBC/CpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c7b5a717.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nfunction recipe(props){\r\n    return(\r\n        <div className=\"rcontain\">\r\n        <h1>{props.title}</h1>\r\n        <img src={props.image} alt=\"\"/>\r\n     <ol>\r\n         {props.ingredients.map(ingredient=>(\r\n             <li>{ingredient.text}</li>\r\n         ))\r\n\r\n         }\r\n     </ol>\r\n     <p>{props.calories}</p>\r\n\r\n     \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default recipe;","import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Recipe from './components/recipe';\n\nfunction App() {\n  const [lists, setlist] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(()=>{\n    console.log(\"useeffect\");\n    setdata()\n  },[query])\n\n  const getdata = (e) => {\n    setSearch(e.target.value)\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    console.log(\"submit\")\n    setQuery(search)\n    console.log(\"before cleaning search\")\n    setSearch(\"\")\n\n  }\n\n\n  const setdata = () => {\n    console.log(\"fetching data from apis\")\n    // this.setState({ query: this.state.search })\n    const App_id = 'cdaaf1d1'\n    const App_key = '5f3035d5705cae5677366736fd53fff1'\n    fetch(`https://api.edamam.com/search?q=${query}&app_id=${App_id}&app_key=${App_key}`)\n      .then(res => {\n        return res.json();\n      }).then(data => {\n        setlist(data.hits);\n      })\n  }\n\n\n\n\n\n  return (\n    <div>\n\n      <div className=\"container\">\n        <form onSubmit={submit}>\n          <input type=\"text\" value={search} onChange={getdata} />\n          <button type=\"submit\" onClick={submit}>Search</button>\n        </form>\n\n        <div className=\"recipe\">\n          {lists.map((recipe) => {\n            return (\n              <Recipe\n                key={recipe.recipe.label}\n                title={recipe.recipe.label}\n                calories={recipe.recipe.calories}\n                image={recipe.recipe.image}\n                ingredients={recipe.recipe.ingredients}\n              />\n\n            )\n          })\n          }\n        </div>\n\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}